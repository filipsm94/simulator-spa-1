/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.udistrital.estudiantes.simulatorspa;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author jhogarcia
 */
public class NewJFrame extends javax.swing.JFrame {

 
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        setSize( 800, 800 );
        setVisible( true );
    }

    
   
    
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        
        pintarBase(g);
        
   
//      paintComponents(g);
 
    }

    @Override
    public void paintComponents(Graphics g) {
        super.paintComponents(g); //To change body of generated methods, choose Tools | Templates.
     
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    public void pintarBase(Graphics g){
        buildBUS(g);
        buildPC(g);
        buildMAR(g);
        buildRAM(g);
        buildIR(g);
        buildUC(g);
        buildAC(g);
        buildALU(g);
        buildB(g);
        buildOUT(g);
        buildResult(g);
    }
    
    public void buildLinesLeftBoardOUT(int xi, int xf, Graphics g){
        //OuT LINE
        for(int i = xi+5; i <= xf-5;i = i+5){
            g.drawLine( 140, i, 230, i );
        }
        // ARROW OUT
        int middle = (xi+xf)/2;
        g.drawLine( 190, xi, 205, middle );
        g.drawLine( 190, xf, 205, middle );
    }
    
    public void buildLinesLeftBoardIN(int xi, int xf, Graphics g){
        //OuT LINE
        for(int i = xi+5; i <= xf-5;i = i+5){
            g.drawLine( 140, i, 230, i );
        }
        // ARROW OUT
        int middle = (xi+xf)/2;
        g.drawLine( 155, middle, 170, xi );
        g.drawLine( 155, middle, 170, xf );
    }
    
    
    public void buildLinesRightBoardOUT(int xi, int xf, Graphics g){
        //OuT LINE
        for(int i = xi+5; i <= xf-5;i = i+5){
            g.drawLine( 310, i, 380, i );
        }
        // ARROW OUT
        int middle = (xi+xf)/2;
        g.drawLine( 320, middle, 335, xi );
        g.drawLine( 320, middle, 335, xf );
    }
    
    public void buildLinesRightBoardIN(int xi, int xf, Graphics g){
        //OuT LINE
        for(int i = xi+5; i <= xf-5;i = i+5){
            g.drawLine( 310, i, 380, i );
        }
        // ARROW OUT
        int middle = (xi+xf)/2;
        g.drawLine( 350, xi, 365, middle );
        g.drawLine( 350, xf, 365, middle );
    }
    
    
     // Begin center board
    public void buildBUS(Graphics g){
        g.drawString( "0", 310, 60);
        g.drawLine(310, 60, 310, 480 );
        
        g.drawString( "1", 300, 60);
        g.drawLine(300, 60, 300, 480 );
        
        g.drawString( "2", 290, 60);
        g.drawLine(290, 60, 290, 480 );
        
        g.drawString( "3", 280, 60);
        g.drawLine(280, 60, 280, 480 );
        
        g.drawString( "4", 270, 60);
        g.drawLine(270, 60, 270, 480 );
        
        g.drawString( "5", 260, 60);
        g.drawLine(260, 60, 260, 480 );
        
        g.drawString( "6", 250, 60);
        g.drawLine(250, 60, 250, 480 );
        
        g.drawString( "7", 240, 60);
        g.drawLine(240, 60, 240, 480 );
    };
    // End Center board
    
    // Begin left board
    public void buildPC(Graphics g){
        g.drawString( "PC", 20, 60 );
        g.drawRect( 20, 60, 120, 60 );
        
        buildLinesLeftBoardOUT(60,90,g);
        buildLinesLeftBoardIN(90,120,g);
    };
    
    public void buildMAR(Graphics g){
        g.drawString("MAR", 20, 140);
        g.drawRect( 20, 140, 120, 60 );
        
        buildLinesLeftBoardOUT(140,170,g);
        buildLinesLeftBoardIN(170,200,g);
        
    };
    
    public void buildRAM(Graphics g){
        //RAM
        g.drawString( "RAM", 20, 220 );
        g.drawRect( 20, 220, 120, 60 );
        buildLinesLeftBoardOUT(220,250,g);
        buildLinesLeftBoardIN(250,280,g);
    };
    
    public void buildIR(Graphics g){
         //RI
        g.drawString( "REG. INST.", 40, 300 );
        g.drawRect( 20, 300, 120, 60 );
        buildLinesLeftBoardOUT(300,330,g);
        buildLinesLeftBoardIN(330,360,g);
    };
    
    public void buildUC(Graphics g){
         //CS
        g.drawString( "UC", 20, 380 );
        g.drawRect( 20, 380, 120, 60 );
        buildLinesLeftBoardOUT(380,410,g);
        buildLinesLeftBoardIN(410,440,g);
    };
    // End left board
    
    // Begin Rigth board
    public void buildAC(Graphics g){
        //A
        g.drawString( "A", 380, 60 );
        g.drawRect(380, 60, 120, 60 );
        
        buildLinesRightBoardOUT(60,90,g);
        buildLinesRightBoardIN(90,120,g);
    };
    
    public void buildALU(Graphics g){
        //ALU
        g.drawString( "ALU", 380, 140 );
        g.drawRect( 380, 140, 120, 60 );
        
        buildLinesRightBoardOUT(140,170,g);
        buildLinesRightBoardIN(170,200,g);
    };
    
    public void buildB(Graphics g){
        //B
        g.drawString( "B", 380, 220 );
        g.drawRect( 380, 220, 120, 60 );
        
        buildLinesRightBoardOUT(220,250,g);
        buildLinesRightBoardIN(250,280,g);
    };
    
    public void buildOUT(Graphics g){
        //RS
        g.drawString( "RS", 380, 300 );
        g.drawRect( 380, 300, 120, 60 );
        
        buildLinesRightBoardOUT(300,330,g);
        buildLinesRightBoardIN(330,360,g);
    };
    
    public void buildResult(Graphics g){
         //DISPLAY
        g.drawString( "DISPLAY", 380, 380);
        g.drawRect( 380, 380, 120, 60 );
        
        buildLinesRightBoardOUT(380,410,g);
        buildLinesRightBoardIN(410,440,g);
    };
    // End Rigth board
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
